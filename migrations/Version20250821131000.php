<?php
declare(strict_types=1);

namespace DoctrineMigrations;

use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;

/**
 * Baseline schema for users, agents, orders, tasks, geo tracking, payments, notifications, reset password, messenger.
 */
final class Version20250821131000 extends AbstractMigration
{
    public function getDescription(): string
    {
        return 'Baseline schema for users, agents, orders, tasks, geo tracking, payments, notifications, reset password, messenger.';
    }

    public function up(Schema $schema): void
    {
        $this->addSql('CREATE TABLE users (id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name VARCHAR(255) NOT NULL, email VARCHAR(255) NOT NULL, phone VARCHAR(50) DEFAULT NULL, password VARCHAR(255) NOT NULL, role VARCHAR(20) NOT NULL, created_at TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL)');
        $this->addSql('CREATE UNIQUE INDEX UNIQ_USERS_EMAIL ON users (email)');
        $this->addSql('CREATE TABLE packs (id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, nb_agents INT NOT NULL, prix NUMERIC(10, 2) NOT NULL, date_creation TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, description TEXT NOT NULL)');
        $this->addSql('CREATE TABLE secured_zones (id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name VARCHAR(255) NOT NULL, geom geometry(Polygon, 4326) NOT NULL, created_at TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL)');
        $this->addSql('CREATE TABLE service_orders (id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, description TEXT DEFAULT NULL, status VARCHAR(20) NOT NULL, created_at TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, secured_zone_id INT NOT NULL, client_id INT NOT NULL)');
        $this->addSql('CREATE INDEX IDX_SERVICE_ORDERS_SECURED_ZONE ON service_orders (secured_zone_id)');
        $this->addSql('CREATE INDEX IDX_SERVICE_ORDERS_CLIENT ON service_orders (client_id)');
        $this->addSql('CREATE TABLE agents (id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, address VARCHAR(255) DEFAULT NULL, sexe VARCHAR(1) NOT NULL, profile_picture_url VARCHAR(255) DEFAULT NULL, user_id INT NOT NULL)');
        $this->addSql('CREATE UNIQUE INDEX UNIQ_AGENTS_USER ON agents (user_id)');
        $this->addSql('CREATE TABLE payment (id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, client_id INT NOT NULL, pack_id INT NOT NULL, status VARCHAR(20) NOT NULL, start_date TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, end_date TIMESTAMP(0) WITHOUT TIME ZONE DEFAULT NULL, created_at TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, updated_at TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL)');
        $this->addSql('CREATE INDEX IDX_PAYMENT_CLIENT ON payment (client_id)');
        $this->addSql('CREATE INDEX IDX_PAYMENT_PACK ON payment (pack_id)');
        $this->addSql("CREATE TABLE payment_history (id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, payment_id INT NOT NULL, date TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, provider VARCHAR(50) NOT NULL DEFAULT 'cybersource', amount NUMERIC(10, 2) NOT NULL, status VARCHAR(20) NOT NULL, created_at TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL)");
        $this->addSql('CREATE INDEX IDX_PAYMENT_HISTORY_PAYMENT ON payment_history (payment_id)');
        $this->addSql('CREATE TABLE notifications (id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, titre VARCHAR(255) NOT NULL, message TEXT NOT NULL, type VARCHAR(50) NOT NULL, cible VARCHAR(20) NOT NULL, is_read BOOLEAN NOT NULL, created_at TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, user_id INT DEFAULT NULL)');
        $this->addSql('CREATE INDEX IDX_NOTIFICATIONS_USER ON notifications (user_id)');
        $this->addSql('CREATE TABLE reset_password_request (id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, user_id INT NOT NULL, selector VARCHAR(20) NOT NULL, hashed_token VARCHAR(100) NOT NULL, requested_at TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, expires_at TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, used BOOLEAN NOT NULL DEFAULT FALSE)');
        $this->addSql('CREATE INDEX IDX_RESET_PWD_USER ON reset_password_request (user_id)');
        $this->addSql('CREATE INDEX IDX_RESET_PWD_SELECTOR ON reset_password_request (selector)');
        $this->addSql('CREATE TABLE tasks (id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, status VARCHAR(20) NOT NULL, description TEXT DEFAULT NULL, end_date TIMESTAMP(0) WITHOUT TIME ZONE DEFAULT NULL, start_date TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, assign_position geometry(Point, 4326) NOT NULL, order_id INT NOT NULL, agent_id INT NOT NULL)');
        $this->addSql('CREATE INDEX IDX_TASKS_ORDER ON tasks (order_id)');
        $this->addSql('CREATE INDEX IDX_TASKS_AGENT ON tasks (agent_id)');
        $this->addSql('CREATE TABLE messages (id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, content TEXT NOT NULL, sent_at TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, order_id INT NOT NULL, sender_id INT NOT NULL, receiver_id INT NOT NULL)');
        $this->addSql('CREATE INDEX IDX_MESSAGES_ORDER ON messages (order_id)');
        $this->addSql('CREATE INDEX IDX_MESSAGES_SENDER ON messages (sender_id)');
        $this->addSql('CREATE INDEX IDX_MESSAGES_RECEIVER ON messages (receiver_id)');
        $this->addSql('CREATE TABLE agent_locations_archive (id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, geom geometry(LineString, 4326) NOT NULL, start_time TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, end_time TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, point_count INT NOT NULL, avg_speed DOUBLE PRECISION DEFAULT NULL, path_length DOUBLE PRECISION DEFAULT NULL, agent_id INT NOT NULL, task_id INT NOT NULL)');
        $this->addSql('CREATE INDEX IDX_ARCHIVE_AGENT ON agent_locations_archive (agent_id)');
        $this->addSql('CREATE INDEX IDX_ARCHIVE_TASK ON agent_locations_archive (task_id)');
        $this->addSql('CREATE TABLE agent_locations_raw (id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, geom geometry(Point, 4326) NOT NULL, recorded_at TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, accuracy DOUBLE PRECISION NOT NULL, speed DOUBLE PRECISION DEFAULT NULL, battery_level DOUBLE PRECISION DEFAULT NULL, is_significant BOOLEAN DEFAULT NULL, tasks_id INT NOT NULL, agent_id INT NOT NULL)');
        $this->addSql('CREATE INDEX IDX_RAW_TASK ON agent_locations_raw (tasks_id)');
        $this->addSql('CREATE INDEX IDX_RAW_AGENT ON agent_locations_raw (agent_id)');
        $this->addSql('CREATE TABLE agent_location_significant (id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, geom geometry(Point, 4326) NOT NULL, recorded_at TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, reason VARCHAR(255) NOT NULL, agent_id INT NOT NULL, task_id INT NOT NULL)');
        $this->addSql('CREATE INDEX IDX_SIGNIFICANT_AGENT ON agent_location_significant (agent_id)');
        $this->addSql('CREATE INDEX IDX_SIGNIFICANT_TASK ON agent_location_significant (task_id)');
        $this->addSql('CREATE TABLE messenger_messages (id BIGSERIAL PRIMARY KEY, body TEXT NOT NULL, headers TEXT NOT NULL, queue_name VARCHAR(255) NOT NULL, created_at TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, available_at TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, delivered_at TIMESTAMP(0) WITHOUT TIME ZONE DEFAULT NULL)');
        $this->addSql('CREATE INDEX IDX_MESSENGER_QUEUE_NAME ON messenger_messages (queue_name)');
        $this->addSql('CREATE INDEX IDX_MESSENGER_AVAILABLE_AT ON messenger_messages (available_at)');
        $this->addSql('CREATE INDEX IDX_MESSENGER_DELIVERED_AT ON messenger_messages (delivered_at)');
        $this->addSql('ALTER TABLE agents ADD CONSTRAINT FK_AGENTS_USER FOREIGN KEY (user_id) REFERENCES users (id)');
        $this->addSql('ALTER TABLE payment ADD CONSTRAINT FK_PAYMENT_CLIENT FOREIGN KEY (client_id) REFERENCES users (id)');
        $this->addSql('ALTER TABLE payment ADD CONSTRAINT FK_PAYMENT_PACK FOREIGN KEY (pack_id) REFERENCES packs (id)');
        $this->addSql('ALTER TABLE payment_history ADD CONSTRAINT FK_PAYMENT_HISTORY_PAYMENT FOREIGN KEY (payment_id) REFERENCES payment (id)');
        $this->addSql('ALTER TABLE notifications ADD CONSTRAINT FK_NOTIFICATIONS_USER FOREIGN KEY (user_id) REFERENCES users (id)');
        $this->addSql('ALTER TABLE reset_password_request ADD CONSTRAINT FK_RESET_PWD_USER FOREIGN KEY (user_id) REFERENCES users (id)');
        $this->addSql('ALTER TABLE service_orders ADD CONSTRAINT FK_SERVICE_ORDERS_SECURED_ZONE FOREIGN KEY (secured_zone_id) REFERENCES secured_zones (id)');
        $this->addSql('ALTER TABLE service_orders ADD CONSTRAINT FK_SERVICE_ORDERS_CLIENT FOREIGN KEY (client_id) REFERENCES users (id)');
        $this->addSql('ALTER TABLE tasks ADD CONSTRAINT FK_TASKS_ORDER FOREIGN KEY (order_id) REFERENCES service_orders (id)');
        $this->addSql('ALTER TABLE tasks ADD CONSTRAINT FK_TASKS_AGENT FOREIGN KEY (agent_id) REFERENCES agents (id)');
        $this->addSql('ALTER TABLE messages ADD CONSTRAINT FK_MESSAGES_ORDER FOREIGN KEY (order_id) REFERENCES service_orders (id)');
        $this->addSql('ALTER TABLE messages ADD CONSTRAINT FK_MESSAGES_SENDER FOREIGN KEY (sender_id) REFERENCES users (id)');
        $this->addSql('ALTER TABLE messages ADD CONSTRAINT FK_MESSAGES_RECEIVER FOREIGN KEY (receiver_id) REFERENCES users (id)');
        $this->addSql('ALTER TABLE agent_locations_archive ADD CONSTRAINT FK_ARCHIVE_AGENT FOREIGN KEY (agent_id) REFERENCES agents (id)');
        $this->addSql('ALTER TABLE agent_locations_archive ADD CONSTRAINT FK_ARCHIVE_TASK FOREIGN KEY (task_id) REFERENCES tasks (id)');
        $this->addSql('ALTER TABLE agent_locations_raw ADD CONSTRAINT FK_RAW_TASK FOREIGN KEY (tasks_id) REFERENCES tasks (id)');
        $this->addSql('ALTER TABLE agent_locations_raw ADD CONSTRAINT FK_RAW_AGENT FOREIGN KEY (agent_id) REFERENCES agents (id)');
        $this->addSql('ALTER TABLE agent_location_significant ADD CONSTRAINT FK_SIGNIFICANT_AGENT FOREIGN KEY (agent_id) REFERENCES agents (id)');
        $this->addSql('ALTER TABLE agent_location_significant ADD CONSTRAINT FK_SIGNIFICANT_TASK FOREIGN KEY (task_id) REFERENCES tasks (id)');
    }

    public function down(Schema $schema): void
    {
        $this->addSql('DROP TABLE agent_location_significant');
        $this->addSql('DROP TABLE agent_locations_raw');
        $this->addSql('DROP TABLE agent_locations_archive');
        $this->addSql('DROP TABLE messages');
        $this->addSql('DROP TABLE tasks');
        $this->addSql('DROP TABLE service_orders');
        $this->addSql('DROP TABLE secured_zones');
        $this->addSql('DROP TABLE payment_history');
        $this->addSql('DROP TABLE payment');
        $this->addSql('DROP TABLE packs');
        $this->addSql('DROP TABLE notifications');
        $this->addSql('DROP TABLE reset_password_request');
        $this->addSql('DROP TABLE agents');
        $this->addSql('DROP TABLE messenger_messages');
        $this->addSql('DROP TABLE users');
    }
}
